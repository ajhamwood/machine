var $=(()=>{let r=new WeakMap,i=Object.values,o=Promise.resolve.bind(Promise),a=(e,t)=>e.constructor===t||t.prototype.isPrototypeOf(e),l=(e,t,n,s=r.get(e)??{})=>{c(e,t,n.name);e.addEventListener(t,(s[t]??={})[n.name]=n);r.set(e,s)},c=(e,t,n,s=r.get(e))=>{if(s&&t in s&&n in s[t]){e.removeEventListener(t,s[t][n]);delete s[t][n]&&(i(s[t]).length||delete s[t])&&(i(s).length||r.delete(e))}};return Object.assign((e,t=document)=>t.querySelector(e),{all(e,t=document){return i(t.querySelectorAll(e))},Machine:class{constructor(e){let n=Object.seal(e);r.set(this,{es:{},state:Object.seal(e)});for(let t in n)Object.defineProperty(this,t,{get:()=>n[t],set:e=>n[t]=e})}state(){return r.get(this).state}on(e,t){(r.get(this).es[e]??=new Map).set(t.name,t);return this}stop(e,t=e){r.get(this).es[e]?.delete(t)&&(es[e].size||delete es[e]);return this}emit(e,...n){return(t=>(r.get(this).es[e]?.forEach(e=>t[e.name]=e.apply(this,n)),t))({})}emitAsync(t,...s){return(e=>(r.get(this).es[t]?.forEach(n=>e=e.then(t=>o(n.apply(this,s)).then(e=>({...t,[n.name]:e})))),e))(o({}))}},pipe:(n=>(e,...t)=>n[e]=(n[e]??o()).then(()=>Promise.all(t.map(e=>a(e,Array)&&Promise.race(e.map(e=>e()))||a(e,Function)&&e()))))({}),targets(n,s=window){for(let t in n)if(a(n[t],Function)){if(a(s,$.Machine))t.split(" ").forEach(e=>s.on(e,n[t]));else if(a(s,EventTarget))t.split(" ").forEach(e=>l(s,e,n[t].bind(s)))}else if(a(n[t],String)){if(a(s,$.Machine))t.split(" ").forEach(e=>s.stop(e,n[t]));else if(a(s,EventTarget))t.split(" ").forEach(e=>c(s,e,"bound "+n[t]))}else if(t in s)$.targets(n[t],s[t]);else for(let e in s)if(e.match(new RegExp(`^${t}$`)))$.targets(n[t],s[e])},queries(r,t){for(let s in r){let e=$.all(s,t);if(e.length)for(let n in r[s])if(a(r[s][n],Function))n.split(" ").forEach(t=>e.forEach(e=>l(e,t,r[s][n].bind(e))));else if(a(r[s][n],String))n.split(" ").forEach(t=>e.forEach(e=>c(e,t,"bound "+r[s][n])))}},load(e,t="body",n){return $.all(t,n).map(t=>i($("template#"+e).content.cloneNode(true).children).map(e=>t.appendChild(e)))},loadWc(t,{constructor:n,...e},s=[]){class r extends HTMLElement{static get observedAttributes(){return s}constructor(...e){super();this.attachShadow({mode:"open"}).appendChild($("#"+t).content.cloneNode(true));n.apply(this,e)}}Object.assign(r.prototype,e);customElements.define(t,r)}})})();